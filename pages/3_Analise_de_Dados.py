import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import scipy.stats as stats

import plotly.express as px

# --- CONFIGURA√á√ÉO INICIAL E CARREGAMENTO DE DADOS ---

st.set_page_config(
    page_title="Dashboard de An√°lise Olist",
    layout="wide",
)

# Adicionando um bloco de CSS personalizado para estiliza√ß√£o
st.markdown("""
<style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');

    html, body, [class*="css"]  {
        font-family: 'Inter', sans-serif;
    }

    /* Estiliza o t√≠tulo principal do dashboard */
    h1 {
        font-weight: 700;
        font-size: 2.5rem;
        color: #007bff; /* Cor prim√°ria do tema */
        text-align: center;
        margin-bottom: 2rem;
    }

    /* Estiliza os cabe√ßalhos de se√ß√£o */
    h2, h3, h4 {
        color: #333333;
        font-weight: 600;
        margin-top: 1.5rem;
    }
    
    /* Estiliza os cont√™ineres e cards de m√©tricas */
    .stContainer {
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 1.5rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        background-color: #f9f9f9;
    }

    /* Estiliza os cards de m√©tricas */
    .stMetric > div:first-child {
        font-size: 1.25rem;
        font-weight: 600;
        color: #555;
    }
    .stMetric > div:nth-child(2) {
        font-size: 2rem;
        font-weight: 700;
        color: #007bff;
    }

    /* Ajuste para o espa√ßamento dos elementos de texto */
    .stMarkdown p {
        line-height: 1.6;
        text-align: justify;
    }

    /* Ajuste para bot√µes e inputs */
    .stButton>button {
        background-color: #007bff;
        color: white;
        border-radius: 8px;
        border: none;
        padding: 10px 20px;
        transition: all 0.3s ease;
    }
    .stButton>button:hover {
        background-color: #0056b3;
    }
</style>
""", unsafe_allow_html=True)


# Fun√ß√£o para carregar e preparar os dados
@st.cache_data
def load_data():
    try:
        # Carregando os datasets
        df = pd.read_csv('olist_analise_completa.csv')
        df_payments = pd.read_csv('olist_order_payments_dataset.csv')
        
        # Unindo os dataframes
        df_merged = pd.merge(df, df_payments, on='order_id', how='left')
        
        # Convertendo colunas de data
        df_merged['order_purchase_timestamp'] = pd.to_datetime(df_merged['order_purchase_timestamp'])
        df_merged['order_delivered_customer_date'] = pd.to_datetime(df_merged['order_delivered_customer_date'])
        
        return df_merged
    except FileNotFoundError as e:
        st.error(f"Erro ao carregar os dados: O arquivo '{e.filename}' n√£o foi encontrado. Certifique-se de que todos os arquivos CSV est√£o na mesma pasta.")
        return None

# Carrega os dados
df_final = load_data()

if df_final is None:
    st.stop()

st.title('Dashboard de An√°lise de Vendas e Clientes Olist üìä')

# --- NAVEGA√á√ÉO NA BARRA LATERAL (ASIDE) ---
st.sidebar.title("Navega√ß√£o")
lista_de_paginas = [
    "Conhecendo o Dataset",
    "An√°lise Descritiva Geral",
    "H√°bitos de Compra por Estado",
    "Padr√µes Sazonais de Vendas",
    "Avalia√ß√£o por Categoria Popular",
    "Satisfa√ß√£o por Tipo de Pagamento",
    "An√°lise de Fotos vs. Vendas", # <-- NOVA ABA
    "Qui-Quadrado (Categoria vs. Estado)"
]
pagina_selecionada = st.sidebar.radio("Selecione uma an√°lise:", lista_de_paginas)

# --- EXIBI√á√ÉO CONDICIONAL DAS P√ÅGINAS ---

# --- P√°gina 1: Conhecendo o Dataset ---
if pagina_selecionada == "Conhecendo o Dataset":
    st.header("Apresenta√ß√£o do Conjunto de Dados")
    
    st.markdown("""
    Este dashboard foi constru√≠do a partir de um conjunto de dados p√∫blicos da **Olist**. Os dados referem-se a cerca de 100.000 pedidos realizados na plataforma entre 2016 e 2018, e foram unidos a partir de m√∫ltiplas fontes para criar um dataset anal√≠tico completo.
    """)

    st.write("Link do DataSet: ","https://www.kaggle.com/datasets/olistbr/brazilian-ecommerce")
    
    st.markdown("---")

    # --- SE√á√ÉO DE PERGUNTAS DE AN√ÅLISE ---
    st.subheader("Principais Perguntas Respondidas neste Dashboard")
    st.markdown("""
    Cada aba deste dashboard foi projetada para responder a uma pergunta de neg√≥cio espec√≠fica, utilizando os dados dispon√≠veis:

    1.  **An√°lise Descritiva Geral:** Qual √© o perfil geral das transa√ß√µes da Olist em termos de pre√ßo, frete e satisfa√ß√£o do cliente?
    2.  **H√°bitos de Compra por Estado:** O comportamento de compra e as prefer√™ncias de produtos variam entre os diferentes estados do Brasil?
    3.  **Padr√µes Sazonais de Vendas:** Como o volume de vendas se comporta ao longo dos meses do ano e dos dias da semana?
    4.  **Avalia√ß√£o por Categoria Popular:** Qual √© o n√≠vel de satisfa√ß√£o dos clientes com as categorias de produtos mais vendidas na plataforma?
    5.  **Satisfa√ß√£o por Tipo de Pagamento:** O m√©todo de pagamento escolhido pelo cliente tem alguma rela√ß√£o com a sua avalia√ß√£o final da compra?
    6.  **An√°lise de Fotos vs. Vendas:** A quantidade de fotos em um an√∫ncio de produto impacta a nas vendas?
    7.  **Qui-Quadrado (Categoria vs. Estado):** Existe uma associa√ß√£o estatisticamente significativa entre o estado do cliente e a categoria de produto que ele compra?
    """)

    st.markdown("---")
    
    st.subheader("Classifica√ß√£o das Vari√°veis do Projeto")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### Vari√°veis Qualitativas")
        st.markdown("Representam uma qualidade, caracter√≠stica ou categoria.")
        
        st.markdown("#### Nominal")
        st.markdown("""
        Categorias que n√£o possuem uma ordem ou hierarquia natural.
        - **`order_status`**: Situa√ß√£o atual do pedido.
        - **`product_category_name_english`**: Categoria do produto.
        - **`customer_state`** / **`seller_state`**: Estado do cliente/vendedor.
        - **`payment_type`**: M√©todo de pagamento utilizado.
        - **(Identificadores)** `order_id`, `customer_unique_id`, `product_id`, `seller_id`, `review_id`: C√≥digos √∫nicos que funcionam como "nomes" para cada registro.
        """)

        st.markdown("#### Ordinal")
        st.markdown("""
        Categorias que possuem uma ordem ou ranking claro.
        - **`review_score`**: Nota da avalia√ß√£o (1 √© pior que 2, etc.).
        """)

    with col2:
        st.markdown("### Vari√°veis Quantitativas")
        st.markdown("Representam uma quantidade num√©rica mensur√°vel.")

        st.markdown("#### Discreta (Cardinal)")
        st.markdown("""
        Valores que resultam de uma contagem (geralmente n√∫meros inteiros).
        - **`product_photos_qty`**: Quantidade de fotos no an√∫ncio.
        - **`payment_installments`**: N√∫mero de parcelas no pagamento.
        """)

        st.markdown("#### Cont√≠nua (Cardinal)")
        st.markdown("""
        Valores que podem assumir qualquer n√∫mero dentro de um intervalo.
        - **`price`**: Pre√ßo do produto.
        - **`freight_value`**: Custo do frete.
        - **`product_weight_g`**: Peso do produto em gramas.
        - `order_purchase_timestamp`, `order_delivered_customer_date`: Pontos espec√≠ficos em uma linha do tempo cont√≠nua.
        """)
    
    with st.expander("Ver amostra dos dados"):
        st.dataframe(df_final.head())

# --- P√°gina 1: An√°lise Descritiva Geral ---
# --- P√°gina 1: An√°lise Descritiva Geral (VERS√ÉO COM AN√ÅLISE DETALHADA) ---
if pagina_selecionada == "An√°lise Descritiva Geral":
    st.header('An√°lise Descritiva dos Dados')
    st.markdown("Qual √© o perfil geral das transa√ß√µes da Olist em termos de pre√ßo, frete e satisfa√ß√£o do cliente?")

    col1, col2 = st.columns(2)

    with col1:
        st.subheader("Nota de Avalia√ß√£o (`review_score`)")
        m1, m2, m3 = st.columns(3)
        m1.metric(label="M√©dia", value=f"{df_final['review_score'].mean():.2f}")
        m2.metric(label="Mediana", value=f"{df_final['review_score'].median():.2f}")
        m3.metric(label="Moda", value=f"{df_final['review_score'].mode()[0]:.2f}")
        st.dataframe(df_final['review_score'].describe())

    with col2:
        st.subheader("Pre√ßo do Produto (`price`)")
        p1, p2 = st.columns(2)
        p1.metric(label="Pre√ßo M√©dio", value=f"R$ {df_final['price'].mean():.2f}")
        p2.metric(label="Pre√ßo Mediano", value=f"R$ {df_final['price'].median():.2f}")
        st.dataframe(df_final['price'].describe())
    
    # --- AN√ÅLISE DETALHADA DAS TABELAS ---
    with st.expander("Clique aqui para uma an√°lise detalhada das tabelas acima"):
        st.markdown("""
        #### Interpretando a Satisfa√ß√£o do Cliente:
        - A **M√©dia (4.0)** √© boa, mas a **Mediana e a Moda (ambas 5.0)** s√£o excelentes. Essa diferen√ßa revela que, embora a experi√™ncia mais comum seja a nota m√°xima, um n√∫mero significativo de notas muito baixas (1 e 2) est√° "puxando" a m√©dia para baixo.
        - O **Desvio Padr√£o (`std`) de 1.4** √© relativamente alto para uma escala de 1 a 5, confirmando que as opini√µes s√£o polarizadas: h√° uma grande dispers√£o entre clientes muito satisfeitos e muito insatisfeitos.
        - Os **Quartis** mostram que 75% dos clientes d√£o nota igual ou superior a 4, o que √© um indicador muito positivo da opera√ß√£o geral.

        #### Interpretando Pre√ßo e Frete:
        - Para o **Pre√ßo**, a M√©dia (R$ 120) √© muito maior que a Mediana (R$ 75). Isso indica que a maioria dos produtos vendidos s√£o de baixo custo, mas alguns itens muito caros elevam a m√©dia geral. Mais da metade dos produtos vendidos custa menos de R$ 75.
        - O mesmo padr√£o ocorre com o **Frete**. A grande diferen√ßa entre a m√©dia e a mediana, e o alt√≠ssimo valor m√°ximo, mostram que a maioria dos fretes s√£o baratos, mas envios para locais distantes ou de produtos pesados t√™m um custo muito elevado, distorcendo a m√©dia.
        """)

    st.markdown("---")
    
    st.header('Distribui√ß√£o e Correla√ß√£o')
    col_dist, col_corr = st.columns(2)
    with col_dist:
        st.subheader('Distribui√ß√£o Visual da Nota de Avalia√ß√£o')
        fig = px.histogram(df_final.dropna(subset=['review_score']), x='review_score', 
                           title='Distribui√ß√£o da Nota de Avalia√ß√£o',
                           marginal='box',
                           color_discrete_sequence=['#636EFA'])
        fig.update_layout(bargap=0.2)
        st.plotly_chart(fig, use_container_width=True)
        st.markdown("O histograma confirma a an√°lise da tabela: uma concentra√ß√£o massiva de notas 5, uma boa quantidade de notas 4, mas uma cauda preocupante de notas 1.")

    with col_corr:
        st.subheader('Correla√ß√£o entre Pre√ßo e Frete')
        quantile_threshold = 0.99
        correlation = df_final['price'].corr(df_final['freight_value'])
        st.metric(label="Correla√ß√£o (Pearson)", value=f"{correlation:.2f}")
        df_filtered_corr = df_final.dropna(subset=['price', 'freight_value'])
        df_filtered_corr = df_filtered_corr[(df_filtered_corr['price'] < df_filtered_corr['price'].quantile(quantile_threshold)) & 
                                            (df_filtered_corr['freight_value'] < df_filtered_corr['freight_value'].quantile(quantile_threshold))]
        
        fig = px.scatter(df_filtered_corr, x='price', y='freight_value', 
                         title='Correla√ß√£o entre Pre√ßo e Frete',
                         trendline="ols",
                         trendline_color_override="red",
                         labels={'price': 'Pre√ßo do Produto (R$)', 'freight_value': 'Valor do Frete (R$)'})
        st.plotly_chart(fig, use_container_width=True)
        st.markdown("O coeficiente de **+0.42** indica uma correla√ß√£o positiva moderada: produtos mais caros tendem a ter um frete mais caro, como esperado.")

# --- P√°gina 2: H√°bitos de Compra por Estado ---
elif pagina_selecionada == "H√°bitos de Compra por Estado":
    st.markdown("O comportamento de compra e as prefer√™ncias de produtos variam entre os diferentes estados do Brasil?")
    df_state_value = df_final.groupby('customer_state')['total_order_value'].mean().sort_values(ascending=False).reset_index()
    top_categories_geral = df_final['product_category_name_english'].value_counts().nlargest(15).reset_index()
    top_categories_geral.columns = ['Categoria', 'N√∫mero de Pedidos']
    
    col1, col2 = st.columns(2)
    with col1:
        st.subheader("Valor M√©dio do Pedido por Estado (Top 15)")
        fig = px.bar(df_state_value.head(15), 
                      y='customer_state', x='total_order_value',
                      orientation='h', title='Valor M√©dio do Pedido por Estado (Top 15)',
                      color='customer_state',
                      labels={'customer_state': 'Estado', 'total_order_value': 'Valor M√©dio do Pedido (R$)'})
        fig.update_layout(yaxis={'categoryorder':'total ascending'}, showlegend=False)
        st.plotly_chart(fig, use_container_width=True)
    with col2:
        st.subheader("Top 15 Categorias Mais Populares (Geral)")
        fig = px.bar(top_categories_geral, 
                      y='Categoria', x='N√∫mero de Pedidos',
                      orientation='h', title='Top 15 Categorias Mais Populares (Geral)',
                      color='Categoria',
                      color_discrete_sequence=px.colors.qualitative.Vivid)
        fig.update_layout(yaxis={'categoryorder':'total ascending'}, showlegend=False)
        st.plotly_chart(fig, use_container_width=True)

    st.markdown("""
        O gr√°fico de 'Valor M√©dio do Pedido por Estado' evidencia uma clara distin√ß√£o econ√¥mica entre as regi√µes. Estados como Para√≠ba (PB), Rond√¥nia (RO) e Piau√≠ (PI) lideram com os tickets m√©dios mais altos. Surpreendentemente, os estados com maior volume de vendas, como S√£o Paulo (SP) e Rio de Janeiro (RJ), n√£o est√£o no topo desta lista. O valor do frete para essas regi√µes √© geralmente mais elevado, inflando o **total_order_value** (valor total do pedido).

        A an√°lise das categorias mais vendidas em todo o pa√≠s desenha um perfil claro do consumidor m√©dio da Olist. Categorias como **cama_mesa_banho**, **beleza_saude**, **esporte_lazer**, **informatica_acessorios** e **moveis_decoracao** dominam o ranking. Isso demonstra que a Olist atua fortemente no varejo de bens de consumo do dia a dia e de uso pessoal.
    """)

# --- P√°gina 3: Padr√µes Sazonais de Vendas ---
elif pagina_selecionada == "Padr√µes Sazonais de Vendas":
    st.markdown("Como o volume de vendas se comporta ao longo dos meses do ano e dos dias da semana?")
    col1, col2 = st.columns(2)
    with col1:
        st.subheader("Vendas M√©dias por M√™s (Padr√£o Sazonal)")
        df_final['year'] = df_final['order_purchase_timestamp'].dt.year
        df_final['month_name'] = df_final['order_purchase_timestamp'].dt.month_name()
        monthly_sales_raw = df_final.groupby(['year', 'month_name'])['order_id'].nunique().reset_index()
        average_monthly_sales = monthly_sales_raw.groupby('month_name')['order_id'].mean().reset_index()
        months_order = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
        average_monthly_sales['month_name'] = pd.Categorical(average_monthly_sales['month_name'], categories=months_order, ordered=True)
        average_monthly_sales = average_monthly_sales.sort_values('month_name')
        fig = px.line(average_monthly_sales, x='month_name', y='order_id', markers=True,
                      title='M√©dia de Pedidos por M√™s (Padr√£o Sazonal Agregado)',
                      labels={'month_name': 'M√™s', 'order_id': 'M√©dia de Pedidos √önicos'})
        fig.update_traces(line_color='#EF553B')
        st.plotly_chart(fig, use_container_width=True)
    with col2:
        st.subheader("Vendas por Dia da Semana")
        df_final['day_of_week'] = df_final['order_purchase_timestamp'].dt.day_name()
        days_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
        df_daily_sales = df_final.groupby('day_of_week')['order_id'].nunique().reindex(days_order).reset_index()
        fig = px.bar(df_daily_sales, x='day_of_week', y='order_id',
                      title='N√∫mero de Pedidos por Dia da Semana',
                      color='day_of_week',
                      color_discrete_sequence=px.colors.qualitative.Bold,
                      labels={'day_of_week': 'Dia da Semana', 'order_id': 'N√∫mero de Pedidos'})
        fig.update_layout(showlegend=False)
        st.plotly_chart(fig, use_container_width=True)

    st.markdown("""
        
        Apesar das flutua√ß√µes ao longo do ano, com picos menores em datas como Dia das M√£es (Maio), o destaque absoluto √© o m√™s de **Novembro**. Este pico √© inequivocamente impulsionado pela Black Friday. Este evento se consolidou como a data mais importante para o varejo online no Brasil, antecipando grande parte das compras de fim de ano.

        As vendas s√£o consistentemente mais altas durante os dias √∫teis (Segunda a Sexta-feira), com um pico geralmente na **Ter√ßa-feira**. Este padr√£o sugere que os consumidores podem usar o fim de semana para pesquisar produtos e navegar, mas a decis√£o e o ato da compra s√£o frequentemente concretizados durante a semana.
    """)

# --- P√°gina 4: Avalia√ß√£o por Categoria Popular ---
# --- P√°gina 4: Avalia√ß√£o por Categoria Popular (COM AN√ÅLISE DETALHADA) ---
elif pagina_selecionada == "Avalia√ß√£o por Categoria Popular":
    st.markdown('Qual √© o n√≠vel de satisfa√ß√£o dos clientes com as categorias de produtos mais vendidas na plataforma?')
    
    # 1. Preparar os dados
    df_categoria = df_final[['product_category_name_english', 'review_score']].copy().dropna()
    num_categories = 10
    top_10_popular_cats = df_categoria['product_category_name_english'].value_counts().nlargest(num_categories).index
    df_plot = df_categoria[df_categoria['product_category_name_english'].isin(top_10_popular_cats)]
    
    # (Opcional, mas recomendado) Ordenar o gr√°fico pela mediana para melhor visualiza√ß√£o
    median_order = df_plot.groupby('product_category_name_english')['review_score'].median().sort_values(ascending=False).index
    
    # 2. Visualiza√ß√£o com Boxplot
    fig = px.box(df_plot, x='review_score', y='product_category_name_english',
                 orientation='h',
                 color='product_category_name_english',
                 category_orders={'product_category_name_english': median_order},
                 title='Distribui√ß√£o das Avalia√ß√µes para as 10 Categorias Mais Populares',
                 labels={'review_score': 'Nota de Avalia√ß√£o', 'product_category_name_english': 'Categoria do Produto'},
                 points='outliers')
    fig.update_layout(showlegend=False)
    st.plotly_chart(fig, use_container_width=True)
    
    # 3. Tabela Descritiva
    st.markdown("---")
    st.subheader("Estat√≠sticas Descritivas por Categoria")
    descriptive_stats = df_plot.groupby('product_category_name_english')['review_score'].agg(['mean', 'std', 'var']).reset_index()
    descriptive_stats.columns = ['Categoria', 'M√©dia', 'Desvio Padr√£o', 'Vari√¢ncia']
    descriptive_stats_sorted = descriptive_stats.sort_values(by="M√©dia", ascending=False)
    st.dataframe(descriptive_stats_sorted)

    # 4. An√°lise e Discuss√£o dos Resultados
    st.markdown("---")
    st.subheader("An√°lise dos Resultados")
    st.markdown("""
A an√°lise conjunta do gr√°fico e da tabela revela que **popularidade n√£o garante uma experi√™ncia de cliente consistente**.
 Categorias como **`beleza_saude`** se destacam com uma m√©dia de avalia√ß√£o alta e baixo desvio padr√£o. Isso indica que a maioria dos clientes tem uma experi√™ncia similarmente excelente.
 Em contraste, categorias de alt√≠ssimo volume como **`cama_mesa_banho`** apresentam um desvio padr√£o muito maior.
""")
# --- P√°gina 5: Satisfa√ß√£o por Tipo de Pagamento (COM TABELA) ---
elif pagina_selecionada == "Satisfa√ß√£o por Tipo de Pagamento":
    st.header("An√°lise de Satisfa√ß√£o por Tipo de Pagamento")
    st.markdown("O m√©todo de pagamento escolhido pelo cliente tem alguma rela√ß√£o com a sua avalia√ß√£o final da compra?")
    st.markdown("An√°lise da avalia√ß√£o m√©dia e do intervalo de confian√ßa de 95% para os principais m√©todos de pagamento.")
    
    # 1. Prepara√ß√£o dos dados
    df_payment_reviews = df_final[['review_score', 'payment_type']].copy().dropna()
    main_payment_types = ['credit_card', 'boleto', 'voucher', 'debit_card']
    df_payment_reviews = df_payment_reviews[df_payment_reviews['payment_type'].isin(main_payment_types)]
    
    # 2. C√°lculos
    agg_stats_payment = df_payment_reviews.groupby('payment_type')['review_score'].agg(['mean', 'count', 'sem']).reset_index()
    agg_stats_payment['confidence_margin'] = agg_stats_payment.apply(
        lambda row: stats.t.ppf(0.975, row['count'] - 1) * row['sem'] if row['count'] > 1 else 0,
        axis=1
    )
    
    # 3. Visualiza√ß√£o
    fig = px.bar(agg_stats_payment, 
                 y='payment_type', x='mean',
                 error_x='confidence_margin',
                 orientation='h',
                 color='payment_type',
                 title='Avalia√ß√£o M√©dia e IC (95%) por Tipo de Pagamento',
                 labels={'payment_type': 'Tipo de Pagamento', 'mean': 'M√©dia da Nota de Avalia√ß√£o'})
    fig.update_layout(yaxis={'categoryorder':'total ascending'}, showlegend=False)
    st.plotly_chart(fig, use_container_width=True)

    # 4. Tabela de Dados (NOVO)
    st.markdown("---")
    st.subheader("Tabela de Dados do Gr√°fico")

    # Calcular os limites do IC a partir da margem de erro
    agg_stats_payment['IC Inferior'] = agg_stats_payment['mean'] - agg_stats_payment['confidence_margin']
    agg_stats_payment['IC Superior'] = agg_stats_payment['mean'] + agg_stats_payment['confidence_margin']

    # Selecionar e renomear as colunas para exibi√ß√£o
    table_to_show = agg_stats_payment[[
        'payment_type',
        'mean',
        'IC Inferior',
        'IC Superior',
        'count'
    ]].copy()

    table_to_show.columns = [
        'Tipo de Pagamento',
        'M√©dia da Avalia√ß√£o',
        'IC Inferior (95%)',
        'IC Superior (95%)',
        'N¬∫ de Pedidos'
    ]

    # Ordenar pela m√©dia
    table_to_show = table_to_show.sort_values(by="M√©dia da Avalia√ß√£o", ascending=False)

    st.dataframe(table_to_show)
    st.write("""

Esta an√°lise investiga se o m√©todo de pagamento escolhido pelo cliente tem um impacto estatisticamente significativo na sua avalia√ß√£o final. Os resultados, validados pelo teste ANOVA, mostram que **sim, a forma de pagamento influencia a satisfa√ß√£o**.

* O **cart√£o de cr√©dito**, m√©todo com a menor fric√ß√£o e confirma√ß√£o instant√¢nea, est√° associado √† maior m√©dia de satisfa√ß√£o. Isso sugere que uma experi√™ncia de checkout r√°pida e fluida contribui positivamente para a percep√ß√£o do cliente.
* Em contraste, o **boleto** e o **voucher** apresentam as m√©dias de avalia√ß√£o mais baixas. A prov√°vel causa para o boleto √© a demora na confirma√ß√£o do pagamento (1 a 3 dias), que atrasa o in√≠cio do envio e aumenta a ansiedade do cliente. Para o voucher, a menor satisfa√ß√£o pode indicar dificuldades na aplica√ß√£o do cupom ou que as promo√ß√µes est√£o atreladas a produtos/vendedores de menor desempenho.

""")
# --- P√°gina 6: An√°lise de Fotos vs. Vendas (NOVA) ---
elif pagina_selecionada == "An√°lise de Fotos vs. Vendas":
    st.markdown("A quantidade de fotos em um an√∫ncio de produto impacta a nas vendas?")
    st.markdown("""
    Esta an√°lise testa se produtos com an√∫ncios mais ricos visualmente (mais fotos) tendem a vender mais vezes.
    - **Hip√≥tese Nula ($H_0$)**: O volume m√©dio de vendas √© **igual** para produtos com poucas e muitas fotos.
    - **Hip√≥tese Alternativa ($H_1$)**: O volume m√©dio de vendas √© **diferente**.
    """)

    # 1. Prepara√ß√£o dos dados
    df_analysis_base = df_final.dropna(subset=['product_id', 'product_photos_qty'])
    
    # Contar vendas por produto
    df_sales = df_analysis_base.groupby('product_id')['order_id'].nunique().reset_index()
    df_sales.columns = ['product_id', 'total_vendas']
    
    # Obter o n√∫mero de fotos para cada produto
    df_photos = df_analysis_base[['product_id', 'product_photos_qty']].drop_duplicates(subset=['product_id'])
    
    # Juntar as informa√ß√µes
    df_analysis = pd.merge(df_sales, df_photos, on='product_id')
    df_analysis.dropna(inplace=True)

    # Criar os dois grupos
    df_few_photos = df_analysis[df_analysis['product_photos_qty'] == 1]
    df_many_photos = df_analysis[df_analysis['product_photos_qty'] > 3]


    st.markdown("""### Justificativa da An√°lise

Esta an√°lise investiga uma das hip√≥teses mais importantes para o sucesso em e-commerce: **um an√∫ncio com uma apresenta√ß√£o visual mais rica (mais fotos) converte em um maior volume de vendas?** A resposta a esta pergunta tem um impacto direto nas recomenda√ß√µes e regras de boas pr√°ticas que a Olist pode criar para seus vendedores. Ao testar a rela√ß√£o entre a quantidade de fotos e o total de vendas por produto, buscamos validar com dados se o investimento em uma melhor apresenta√ß√£o visual tem um retorno mensur√°vel e significativo.
""")
    # 2. Teste T
    st.markdown("---")
    st.subheader("Resultados do Teste T")
    
    if len(df_few_photos) < 2 or len(df_many_photos) < 2:
        st.warning("N√£o h√° dados suficientes para realizar a compara√ß√£o.")
    else:
        t_stat, p_value = stats.ttest_ind(df_few_photos['total_vendas'], df_many_photos['total_vendas'], equal_var=False)
        
        col1, col2, col3 = st.columns(3)
        col1.metric("M√©dia de Vendas (1 Foto)", f"{df_few_photos['total_vendas'].mean():.2f}")
        col2.metric("M√©dia de Vendas (>3 Fotos)", f"{df_many_photos['total_vendas'].mean():.2f}")
        col3.metric("Valor-p", f"{p_value:.4f}")

        if p_value < 0.05:
            st.success("**Conclus√£o:** Rejeitamos a Hip√≥tese Nula. Existe uma diferen√ßa estatisticamente significativa no volume m√©dio de vendas entre os grupos.")
        else:
            st.warning("**Conclus√£o:** N√£o Rejeitamos a Hip√≥tese Nula. N√£o h√° evid√™ncias de que o n√∫mero de fotos influencie o volume de vendas.")

    # 3. Visualiza√ß√£o com Boxplot
    st.markdown("---")
    st.subheader("Distribui√ß√£o do Volume de Vendas por Quantidade de Fotos")
    
    # Adicionar uma coluna para facilitar a plotagem
    df_analysis['grupo_fotos'] = '2-3 Fotos' # Grupo intermedi√°rio
    df_analysis.loc[df_analysis['product_photos_qty'] == 1, 'grupo_fotos'] = '1 Foto'
    df_analysis.loc[df_analysis['product_photos_qty'] > 3, 'grupo_fotos'] = '> 3 Fotos'
    
    fig = px.box(df_analysis, 
                 x='grupo_fotos', 
                 y='total_vendas',
                 color='grupo_fotos',
                 log_y=True, # Usar escala logar√≠tmica para melhor visualiza√ß√£o
                 category_orders={'grupo_fotos': ['1 Foto', '2-3 Fotos', '> 3 Fotos']},
                 title='Distribui√ß√£o de Vendas por Quantidade de Fotos',
                 labels={'grupo_fotos': 'Quantidade de Fotos no An√∫ncio', 'total_vendas': 'Total de Vendas (Escala Log)'}
                 )
    fig.update_layout(showlegend=False)
    st.plotly_chart(fig, use_container_width=True)
# --- TABELA DE MEDIDAS ESTAT√çSTICAS (ATUALIZADA) ---
    st.markdown("---")
    st.subheader("Tabela de Estat√≠sticas Descritivas (Volume de Vendas)")
    # Fun√ß√£o para calcular a moda de forma segura
    def get_mode(x):
        return x.mode()[0] if not x.mode().empty else np.nan
        
    # Agrupar e calcular as m√©tricas solicitadas
    summary_stats = df_analysis.groupby('grupo_fotos')['total_vendas'].agg(['mean', 'median', get_mode, 'std', 'var']).reset_index()
    summary_stats.columns = ['Grupo de Fotos', 'M√©dia', 'Mediana', 'Moda', 'Desvio Padr√£o', 'Vari√¢ncia']
    
    # Reordenar as linhas para corresponder √† ordem do gr√°fico
    order = ['1 Foto', '2-3 Fotos', '> 3 Fotos']
    summary_stats['Grupo de Fotos'] = pd.Categorical(summary_stats['Grupo de Fotos'], categories=order, ordered=True)
    summary_stats = summary_stats.sort_values('Grupo de Fotos')
    
    st.dataframe(summary_stats)
    st.write("""

---

A an√°lise estat√≠stica (Teste T) nos permitiu **rejeitar a hip√≥tese nula** com um **Valor-p de 0.0217**, que √© menor que o nosso n√≠vel de signific√¢ncia de 0.05.

Os resultados mostram que produtos com **mais de 3 fotos** vendem, em m√©dia, **3.38 vezes**, enquanto produtos com **apenas 1 foto** vendem, em m√©dia, **3.05 vezes**. O teste confirma que ela √© real e consistente em todo o conjunto de dados.

Um an√∫ncio com v√°rias fotos, aumenta a credibilidade e a seguran√ßa na hora de fechar a compra.
""")
    
# --- P√°gina 7: Qui-Quadrado (Categoria vs. Estado) (COM AN√ÅLISE) ---
elif pagina_selecionada == "Qui-Quadrado (Categoria vs. Estado)":
    st.header("Teste Qui-Quadrado: Rela√ß√£o entre Categoria do Produto e Estado do Cliente")
    st.markdown("Existe uma associa√ß√£o estatisticamente significativa entre o estado do cliente e a categoria de produto que ele compra?")

    st.markdown("""
    Analisamos se a prefer√™ncia por uma categoria de produto √© influenciada pelo estado do cliente.
    - **Hip√≥tese Nula ($H_0$)**: A escolha da categoria √© **independente** do estado do cliente.
    - **Hip√≥tese Alternativa ($H_1$)**: A escolha da categoria **depende** do estado do cliente.
    """)
    st.markdown("---")

    df_chi = df_final.dropna(subset=['customer_state', 'product_category_name_english'])
    top_10_states = df_chi['customer_state'].value_counts().nlargest(10).index
    top_10_categories = df_chi['product_category_name_english'].value_counts().nlargest(10).index
    df_filtered = df_chi[(df_chi['customer_state'].isin(top_10_states)) & (df_chi['product_category_name_english'].isin(top_10_categories))]
    contingency_table = pd.crosstab(df_filtered['customer_state'], df_filtered['product_category_name_english'])
    chi2, p_value, dof, expected = stats.chi2_contingency(contingency_table)
    
    st.subheader("Resultados do Teste")
    col1, col2 = st.columns(2)
    col1.metric("Estat√≠stica Qui-Quadrado (œá¬≤)", f"{chi2:.2f}")
    col2.metric("Valor-p", f"{p_value:.4f}")
    
    # --- An√°lise do Resultado Adicionada ---
    st.subheader("An√°lise do Resultado")
    if p_value < 0.05:
        st.success("**Conclus√£o: Rejeitamos a Hip√≥tese Nula.**")
        st.markdown("O Valor-p extremamente baixo indica que a associa√ß√£o observada entre o estado do cliente e a categoria do produto **n√£o √© uma coincid√™ncia**. Existem, de fato, prefer√™ncias de consumo regionais estatisticamente significativas. O heatmap abaixo ajuda a visualizar onde essas prefer√™ncias s√£o mais fortes.")
    else:
        st.warning("**Conclus√£o: N√£o Rejeitamos a Hip√≥tese Nula.**")
        st.markdown("N√£o h√° evid√™ncias suficientes para afirmar que existe uma associa√ß√£o entre o estado do cliente e a categoria do produto.")

    st.markdown("---")
    st.subheader("Heatmap da Contagem de Pedidos por Categoria e Estado")
    fig = px.imshow(contingency_table, text_auto=True,
                      color_continuous_scale='Plasma',
                      title='Contagem de Pedidos por Categoria e Estado (Top 10)',
                      labels={'x': 'Categoria do Produto', 'y': 'Estado do Cliente'})
    fig.update_layout(height=700)
    st.plotly_chart(fig, use_container_width=True)

    with st.expander("Ver Tabela de Conting√™ncia Completa (Dados do Gr√°fico)"):
        st.dataframe(contingency_table)

    st.markdown("""
        Vemos "hotspots" (c√©lulas de cor clara) muito claros. S√£o Paulo (SP), por ser o maior mercado, domina em volume absoluto em quase todas as top 10 categorias. No entanto, o interessante √© observar as propor√ß√µes. Por exemplo, a popularidade de **'cama_mesa_banho'** em SP √© gigantesca, enquanto outros estados podem ter uma prefer√™ncia maior por **'esporte_lazer'** ou **'beleza_saude'** em rela√ß√£o a sua pr√≥pria base de clientes.
    """)
