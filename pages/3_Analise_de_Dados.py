import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import scipy.stats as stats

import plotly.express as px

# --- CONFIGURA√á√ÉO INICIAL E CARREGAMENTO DE DADOS ---

st.set_page_config(
    page_title="Dashboard de An√°lise Olist",
    layout="wide",
)

# Adicionando um bloco de CSS personalizado para estiliza√ß√£o
st.markdown("""
<style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');

    html, body, [class*="css"]  {
        font-family: 'Inter', sans-serif;
    }

    /* Estiliza o t√≠tulo principal do dashboard */
    h1 {
        font-weight: 700;
        font-size: 2.5rem;
        color: #007bff; /* Cor prim√°ria do tema */
        text-align: center;
        margin-bottom: 2rem;
    }

    /* Estiliza os cabe√ßalhos de se√ß√£o */
    h2, h3, h4 {
        color: #333333;
        font-weight: 600;
        margin-top: 1.5rem;
    }
    
    /* Estiliza os cont√™ineres e cards de m√©tricas */
    .stContainer {
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 1.5rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        background-color: #f9f9f9;
    }

    /* Estiliza os cards de m√©tricas */
    .stMetric > div:first-child {
        font-size: 1.25rem;
        font-weight: 600;
        color: #555;
    }
    .stMetric > div:nth-child(2) {
        font-size: 2rem;
        font-weight: 700;
        color: #007bff;
    }

    /* Ajuste para o espa√ßamento dos elementos de texto */
    .stMarkdown p {
        line-height: 1.6;
        text-align: justify;
    }

    /* Ajuste para bot√µes e inputs */
    .stButton>button {
        background-color: #007bff;
        color: white;
        border-radius: 8px;
        border: none;
        padding: 10px 20px;
        transition: all 0.3s ease;
    }
    .stButton>button:hover {
        background-color: #0056b3;
    }
</style>
""", unsafe_allow_html=True)


# Fun√ß√£o para carregar e preparar os dados
@st.cache_data
def load_data():
    try:
        # Carregando os datasets
        df = pd.read_csv('olist_analise_completa.csv')
        df_payments = pd.read_csv('olist_order_payments_dataset.csv')
        
        # Unindo os dataframes
        df_merged = pd.merge(df, df_payments, on='order_id', how='left')
        
        # Convertendo colunas de data
        df_merged['order_purchase_timestamp'] = pd.to_datetime(df_merged['order_purchase_timestamp'])
        df_merged['order_delivered_customer_date'] = pd.to_datetime(df_merged['order_delivered_customer_date'])
        
        return df_merged
    except FileNotFoundError as e:
        st.error(f"Erro ao carregar os dados: O arquivo '{e.filename}' n√£o foi encontrado. Certifique-se de que todos os arquivos CSV est√£o na mesma pasta.")
        return None

# Carrega os dados
df_final = load_data()

if df_final is None:
    st.stop()

st.title('Dashboard de An√°lise de Vendas e Clientes Olist üìä')

# --- NAVEGA√á√ÉO NA BARRA LATERAL (ASIDE) ---
st.sidebar.title("Navega√ß√£o")
lista_de_paginas = [
    "Conhecendo o Dataset",
    "An√°lise Descritiva Geral",
    "H√°bitos de Compra por Estado",
    "Padr√µes Sazonais de Vendas",
    "Avalia√ß√£o por Categoria Popular",
    "Satisfa√ß√£o por Tipo de Pagamento",
    "Qualidade do An√∫ncio vs. Satisfa√ß√£o",
    "Qui-Quadrado (Categoria vs. Estado)"
]
pagina_selecionada = st.sidebar.radio("Selecione uma an√°lise:", lista_de_paginas)

# --- EXIBI√á√ÉO CONDICIONAL DAS P√ÅGINAS ---

# --- P√°gina 1: Conhecendo o Dataset ---
if pagina_selecionada == "Conhecendo o Dataset":
    st.header("Apresenta√ß√£o do Conjunto de Dados")
    
    st.markdown("""
    Este dashboard foi constru√≠do a partir de um conjunto de dados p√∫blicos da **Olist**. Os dados referem-se a cerca de 100.000 pedidos realizados na plataforma entre 2016 e 2018, e foram unidos a partir de m√∫ltiplas fontes para criar um dataset anal√≠tico completo.
    """)

    st.write("Link do DataSet: ","https://www.kaggle.com/datasets/olistbr/brazilian-ecommerce")
    
    st.markdown("---")

    # --- SE√á√ÉO DE PERGUNTAS DE AN√ÅLISE ---
    st.subheader("Principais Perguntas Respondidas neste Dashboard")
    st.markdown("""
    Cada aba deste dashboard foi projetada para responder a uma pergunta de neg√≥cio espec√≠fica, utilizando os dados dispon√≠veis:

    1.  **An√°lise Descritiva Geral:** Qual √© o perfil geral das transa√ß√µes da Olist em termos de pre√ßo, frete e satisfa√ß√£o do cliente?
    2.  **H√°bitos de Compra por Estado:** O comportamento de compra e as prefer√™ncias de produtos variam entre os diferentes estados do Brasil?
    3.  **Padr√µes Sazonais de Vendas:** Como o volume de vendas se comporta ao longo dos meses do ano e dos dias da semana?
    4.  **Avalia√ß√£o por Categoria Popular:** Qual √© o n√≠vel de satisfa√ß√£o dos clientes com as categorias de produtos mais vendidas na plataforma?
    5.  **Satisfa√ß√£o por Tipo de Pagamento:** O m√©todo de pagamento escolhido pelo cliente tem alguma rela√ß√£o com a sua avalia√ß√£o final da compra?
    6.  **Qualidade do An√∫ncio vs. Satisfa√ß√£o:** A quantidade de fotos em um an√∫ncio de produto impacta a nota de avalia√ß√£o do cliente?
    7.  **Qui-Quadrado (Categoria vs. Estado):** Existe uma associa√ß√£o estatisticamente significativa entre o estado do cliente e a categoria de produto que ele compra?
    """)

    st.markdown("---")
    
    st.subheader("Classifica√ß√£o das Vari√°veis do Projeto")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### Vari√°veis Qualitativas")
        st.markdown("Representam uma qualidade, caracter√≠stica ou categoria.")
        
        st.markdown("#### Nominal")
        st.markdown("""
        Categorias que n√£o possuem uma ordem ou hierarquia natural.
        - **`order_status`**: Situa√ß√£o atual do pedido.
        - **`product_category_name_english`**: Categoria do produto.
        - **`customer_state`** / **`seller_state`**: Estado do cliente/vendedor.
        - **`payment_type`**: M√©todo de pagamento utilizado.
        - **(Identificadores)** `order_id`, `customer_unique_id`, `product_id`, `seller_id`, `review_id`: C√≥digos √∫nicos que funcionam como "nomes" para cada registro.
        """)

        st.markdown("#### Ordinal")
        st.markdown("""
        Categorias que possuem uma ordem ou ranking claro.
        - **`review_score`**: Nota da avalia√ß√£o (1 √© pior que 2, etc.).
        """)

    with col2:
        st.markdown("### Vari√°veis Quantitativas")
        st.markdown("Representam uma quantidade num√©rica mensur√°vel.")

        st.markdown("#### Discreta (Cardinal)")
        st.markdown("""
        Valores que resultam de uma contagem (geralmente n√∫meros inteiros).
        - **`product_photos_qty`**: Quantidade de fotos no an√∫ncio.
        - **`payment_installments`**: N√∫mero de parcelas no pagamento.
        """)

        st.markdown("#### Cont√≠nua (Cardinal)")
        st.markdown("""
        Valores que podem assumir qualquer n√∫mero dentro de um intervalo.
        - **`price`**: Pre√ßo do produto.
        - **`freight_value`**: Custo do frete.
        - **`product_weight_g`**: Peso do produto em gramas.
        - **(Datas)** `order_purchase_timestamp`, `order_delivered_customer_date`: Pontos espec√≠ficos em uma linha do tempo cont√≠nua.
        """)
    
    with st.expander("Ver amostra dos dados"):
        st.dataframe(df_final.head())

# --- P√°gina 1: An√°lise Descritiva Geral ---
if pagina_selecionada == "An√°lise Descritiva Geral":
    st.header('An√°lise Descritiva dos Dados')
    
    # Criando um cont√™iner para os cards de m√©tricas
    with st.container():
        st.subheader("Nota de Avalia√ß√£o")
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric(label="M√©dia", value=f"{df_final['review_score'].mean():.2f}")
        with col2:
            st.metric(label="Mediana", value=f"{df_final['review_score'].median():.2f}")
        with col3:
            st.metric(label="Moda", value=f"{df_final['review_score'].mode()[0]:.2f}")
        st.dataframe(df_final['review_score'].describe())

    st.markdown("---")

    with st.container():
        st.subheader("Pre√ßo do Produto e Valor do Frete")
        p1, p2 = st.columns(2)
        with p1:
            st.metric(label="Pre√ßo M√©dio", value=f"R$ {df_final['price'].mean():.2f}")
            st.dataframe(df_final['price'].describe())
        with p2:
            st.metric(label="Frete M√©dio", value=f"R$ {df_final['freight_value'].mean():.2f}")
            st.dataframe(df_final['freight_value'].describe())
    
    st.markdown("""
        A an√°lise da **review_score** mostra um cen√°rio predominantemente positivo. A m√©dia de avalia√ß√£o de 4.0 sugere uma boa satisfa√ß√£o geral. No entanto, uma an√°lise mais profunda revela uma nuance crucial: a mediana (nota que divide a amostra ao meio) e a moda (nota mais frequente) s√£o 5.0.
        
        No perfil de **Pre√ßos e Fretes**, tanto para o pre√ßo dos produtos quanto para o valor do frete, observamos que a m√©dia √© consideravelmente maior que a mediana. Isso indica que o volume de vendas da Olist est√° concentrado em produtos de baixo e m√©dio custo. Alguns itens muito caros e/ou fretes para locais distantes e de produtos pesados inflam a m√©dia, mas n√£o representam a realidade da maioria das transa√ß√µes. A Olist √©, predominantemente, um marketplace de produtos com ticket m√©dio acess√≠vel.
    """)
    st.markdown("---")
    
    st.subheader('Distribui√ß√£o e Correla√ß√£o')
    col_dist, col_corr = st.columns(2)
    with col_dist:
        st.subheader('Distribui√ß√£o da Nota de Avalia√ß√£o')
        fig = px.histogram(df_final.dropna(subset=['review_score']), x='review_score', 
                            title='Distribui√ß√£o da Nota de Avalia√ß√£o do Cliente',
                            marginal='box',
                            color_discrete_sequence=['#636EFA'])
        fig.update_layout(bargap=0.2)
        st.plotly_chart(fig, use_container_width=True)

    with col_corr:
        st.subheader('Correla√ß√£o entre Pre√ßo e Frete')
        quantile_threshold = 0.99
        correlation = df_final['price'].corr(df_final['freight_value'])
        st.metric(label="Correla√ß√£o (Pearson)", value=f"{correlation:.2f}")
        df_filtered_corr = df_final.dropna(subset=['price', 'freight_value'])
        df_filtered_corr = df_filtered_corr[(df_filtered_corr['price'] < df_filtered_corr['price'].quantile(quantile_threshold)) & 
                                         (df_filtered_corr['freight_value'] < df_filtered_corr['freight_value'].quantile(quantile_threshold))]
        
        fig = px.scatter(df_filtered_corr, x='price', y='freight_value', 
                          title='Correla√ß√£o entre Pre√ßo do Produto e Valor do Frete',
                          trendline="ols",
                          trendline_color_override="red",
                          labels={'price': 'Pre√ßo do Produto (R$)', 'freight_value': 'Valor do Frete (R$)'})
        st.plotly_chart(fig, use_container_width=True)

    st.markdown("""
        O gr√°fico de dispers√£o e o coeficiente de correla√ß√£o de aproximadamente **+0.44** confirmam que existe uma rela√ß√£o positiva moderada entre o pre√ßo do produto e o valor do frete. Isso faz sentido, pois produtos mais caros tendem a ser maiores e mais pesados, impactando o custo de envio.
    """)

# --- P√°gina 2: H√°bitos de Compra por Estado ---
elif pagina_selecionada == "H√°bitos de Compra por Estado":
    st.header("An√°lise Geogr√°fica dos H√°bitos de Compra")
    df_state_value = df_final.groupby('customer_state')['total_order_value'].mean().sort_values(ascending=False).reset_index()
    top_categories_geral = df_final['product_category_name_english'].value_counts().nlargest(15).reset_index()
    top_categories_geral.columns = ['Categoria', 'N√∫mero de Pedidos']
    
    col1, col2 = st.columns(2)
    with col1:
        st.subheader("Valor M√©dio do Pedido por Estado (Top 15)")
        fig = px.bar(df_state_value.head(15), 
                      y='customer_state', x='total_order_value',
                      orientation='h', title='Valor M√©dio do Pedido por Estado (Top 15)',
                      color='customer_state',
                      labels={'customer_state': 'Estado', 'total_order_value': 'Valor M√©dio do Pedido (R$)'})
        fig.update_layout(yaxis={'categoryorder':'total ascending'}, showlegend=False)
        st.plotly_chart(fig, use_container_width=True)
    with col2:
        st.subheader("Top 15 Categorias Mais Populares (Geral)")
        fig = px.bar(top_categories_geral, 
                      y='Categoria', x='N√∫mero de Pedidos',
                      orientation='h', title='Top 15 Categorias Mais Populares (Geral)',
                      color='Categoria',
                      color_discrete_sequence=px.colors.qualitative.Vivid)
        fig.update_layout(yaxis={'categoryorder':'total ascending'}, showlegend=False)
        st.plotly_chart(fig, use_container_width=True)

    st.markdown("""
        O gr√°fico de 'Valor M√©dio do Pedido por Estado' evidencia uma clara distin√ß√£o econ√¥mica entre as regi√µes. Estados como Para√≠ba (PB), Rond√¥nia (RO) e Piau√≠ (PI) lideram com os tickets m√©dios mais altos. Surpreendentemente, os estados com maior volume de vendas, como S√£o Paulo (SP) e Rio de Janeiro (RJ), n√£o est√£o no topo desta lista. O valor do frete para essas regi√µes √© geralmente mais elevado, inflando o **total_order_value** (valor total do pedido).

        A an√°lise das categorias mais vendidas em todo o pa√≠s desenha um perfil claro do consumidor m√©dio da Olist. Categorias como **cama_mesa_banho**, **beleza_saude**, **esporte_lazer**, **informatica_acessorios** e **moveis_decoracao** dominam o ranking. Isso demonstra que a Olist atua fortemente no varejo de bens de consumo do dia a dia e de uso pessoal.
    """)

# --- P√°gina 3: Padr√µes Sazonais de Vendas ---
elif pagina_selecionada == "Padr√µes Sazonais de Vendas":
    st.header("An√°lise de Sazonalidade das Vendas")
    col1, col2 = st.columns(2)
    with col1:
        st.subheader("Vendas M√©dias por M√™s (Padr√£o Sazonal)")
        df_final['year'] = df_final['order_purchase_timestamp'].dt.year
        df_final['month_name'] = df_final['order_purchase_timestamp'].dt.month_name()
        monthly_sales_raw = df_final.groupby(['year', 'month_name'])['order_id'].nunique().reset_index()
        average_monthly_sales = monthly_sales_raw.groupby('month_name')['order_id'].mean().reset_index()
        months_order = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
        average_monthly_sales['month_name'] = pd.Categorical(average_monthly_sales['month_name'], categories=months_order, ordered=True)
        average_monthly_sales = average_monthly_sales.sort_values('month_name')
        fig = px.line(average_monthly_sales, x='month_name', y='order_id', markers=True,
                      title='M√©dia de Pedidos por M√™s (Padr√£o Sazonal Agregado)',
                      labels={'month_name': 'M√™s', 'order_id': 'M√©dia de Pedidos √önicos'})
        fig.update_traces(line_color='#EF553B')
        st.plotly_chart(fig, use_container_width=True)
    with col2:
        st.subheader("Vendas por Dia da Semana")
        df_final['day_of_week'] = df_final['order_purchase_timestamp'].dt.day_name()
        days_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
        df_daily_sales = df_final.groupby('day_of_week')['order_id'].nunique().reindex(days_order).reset_index()
        fig = px.bar(df_daily_sales, x='day_of_week', y='order_id',
                      title='N√∫mero de Pedidos por Dia da Semana',
                      color='day_of_week',
                      color_discrete_sequence=px.colors.qualitative.Bold,
                      labels={'day_of_week': 'Dia da Semana', 'order_id': 'N√∫mero de Pedidos'})
        fig.update_layout(showlegend=False)
        st.plotly_chart(fig, use_container_width=True)

    st.markdown("""
        Os gr√°ficos desta aba mostram que as vendas da Olist s√£o fortemente influenciadas tanto por um macro-ciclo anual, impulsionado por datas comemorativas, quanto por um micro-ciclo semanal, que reflete a rotina do consumidor.
        
        Embora haja flutua√ß√µes ao longo do ano, com picos menores em datas como Dia das M√£es (Maio), o destaque absoluto √© o m√™s de **Novembro**. Este pico √© inequivocamente impulsionado pela Black Friday. Este evento se consolidou como a data mais importante para o varejo online no Brasil, antecipando grande parte das compras de fim de ano.

        As vendas s√£o consistentemente mais altas durante os dias √∫teis (Segunda a Sexta-feira), com um pico geralmente na **Ter√ßa-feira**. Este padr√£o sugere que os consumidores podem usar o fim de semana para pesquisar produtos e navegar, mas a decis√£o e o ato da compra s√£o frequentemente concretizados durante a semana.
    """)

# --- P√°gina 4: Avalia√ß√£o por Categoria Popular ---
elif pagina_selecionada == "Avalia√ß√£o por Categoria Popular":
    st.header('Distribui√ß√£o da Nota de Avalia√ß√£o para as Categorias Mais Populares')
    st.markdown("O boxplot mostra a distribui√ß√£o das notas para as 10 categorias com **maior volume de vendas**. O losango branco representa a **m√©dia**.")
    
    # 1. Preparar os dados
    df_categoria = df_final[['product_category_name_english', 'review_score']].copy().dropna()
    num_categories = 10
    top_10_popular_cats = df_categoria['product_category_name_english'].value_counts().nlargest(num_categories).index
    df_plot = df_categoria[df_categoria['product_category_name_english'].isin(top_10_popular_cats)]
    
    # (Opcional, mas recomendado) Ordenar o gr√°fico pela mediana para melhor visualiza√ß√£o
    median_order = df_plot.groupby('product_category_name_english')['review_score'].median().sort_values(ascending=False).index
    
    # 2. Visualiza√ß√£o com Boxplot
    fig = px.box(df_plot, x='review_score', y='product_category_name_english',
                  orientation='h',
                  color='product_category_name_english',
                  category_orders={'product_category_name_english': median_order},
                  title='Distribui√ß√£o das Avalia√ß√µes para as 10 Categorias Mais Populares',
                  labels={'review_score': 'Nota de Avalia√ß√£o', 'product_category_name_english': 'Categoria do Produto'})
    fig.update_layout(showlegend=False)
    st.plotly_chart(fig, use_container_width=True)
    
    # 3. Tabela Descritiva
    st.markdown("---")
    st.subheader("Estat√≠sticas Descritivas por Categoria")
    
    # Calculando as estat√≠sticas solicitadas: m√©dia, desvio padr√£o e vari√¢ncia
    descriptive_stats = df_plot.groupby('product_category_name_english')['review_score'].agg(['mean', 'std', 'var']).reset_index()
    
    # Renomeando as colunas
    descriptive_stats.columns = ['Categoria', 'M√©dia', 'Desvio Padr√£o', 'Vari√¢ncia']
    
    # Ordenando pela m√©dia para melhor visualiza√ß√£o
    descriptive_stats_sorted = descriptive_stats.sort_values(by="M√©dia", ascending=False)
    
    st.dataframe(descriptive_stats_sorted)

    st.markdown("""
        Categorias como **'beleza_saude'** e **'esporte_lazer'** se destacam. Seus boxplots mostram uma mediana alta (geralmente em 5.0) e uma 'caixa' (o intervalo interquartil) relativamente compacta e posicionada na parte superior do gr√°fico.
        
        Por outro lado, categorias como **'cama_mesa_banho'** ou **'informatica_acessorios'**, apesar de serem extremamente populares, exibem um boxplot muito mais 'largo'. Al√©m disso, elas frequentemente apresentam uma quantidade significativa de outliers (os pontos individuais) com notas muito baixas (1 e 2).
    """)

# --- P√°gina 5: Satisfa√ß√£o por Tipo de Pagamento ---
elif pagina_selecionada == "Satisfa√ß√£o por Tipo de Pagamento":
    st.header("An√°lise de Satisfa√ß√£o por Tipo de Pagamento")
    df_payment_reviews = df_final[['review_score', 'payment_type']].copy().dropna()
    main_payment_types = ['credit_card', 'boleto', 'voucher', 'debit_card']
    df_payment_reviews = df_payment_reviews[df_payment_reviews['payment_type'].isin(main_payment_types)]
    agg_stats_payment = df_payment_reviews.groupby('payment_type')['review_score'].agg(['mean', 'count', 'sem']).reset_index()
    agg_stats_payment['confidence_margin'] = agg_stats_payment.apply(lambda row: stats.t.ppf(0.975, row['count'] - 1) * row['sem'] if row['count'] > 1 else 0, axis=1)
    
    fig = px.bar(agg_stats_payment, 
                  y='payment_type', x='mean',
                  error_x='confidence_margin',
                  orientation='h',
                  color='payment_type',
                  title='Avalia√ß√£o M√©dia e IC (95%) por Tipo de Pagamento',
                  labels={'payment_type': 'Tipo de Pagamento', 'mean': 'M√©dia da Nota de Avalia√ß√£o'})
    fig.update_layout(yaxis={'categoryorder':'total ascending'}, showlegend=False)
    st.plotly_chart(fig, use_container_width=True)

    st.markdown("""
        O **cart√£o de cr√©dito** √© o m√©todo associado √† maior m√©dia de satisfa√ß√£o. A an√°lise sugere que sua popularidade e alta avalia√ß√£o v√™m da experi√™ncia fluida e de baixa fric√ß√£o que proporciona.
        
        Por outro lado, o **voucher** √© o m√©todo que apresenta a pior avalia√ß√£o m√©dia entre todos. A an√°lise aponta que o uso de vouchers, que deveriam ser um incentivo, pode estar se tornando uma fonte de frustra√ß√£o. As causas prov√°veis incluem problemas t√©cnicos na aplica√ß√£o do c√≥digo ou regras de promo√ß√£o confusas que quebram a expectativa do cliente.
    """)

# --- P√°gina 6: Qualidade do An√∫ncio vs. Satisfa√ß√£o ---
elif pagina_selecionada == "Qualidade do An√∫ncio vs. Satisfa√ß√£o":
    st.header("Impacto da Qualidade do An√∫ncio na Satisfa√ß√£o do Cliente")
    st.markdown("""
    Analisamos se a quantidade de fotos no an√∫ncio de um produto tem rela√ß√£o com a nota de avalia√ß√£o final.
    - **Hip√≥tese Nula ($H_0$)**: A avalia√ß√£o m√©dia √© **igual** para produtos com poucas (1) e muitas (>3) fotos.
    - **Hip√≥tese Alternativa ($H_1$)**: As m√©dias s√£o **diferentes**.
    """)
    st.markdown("---")

    df_cleaned = df_final.dropna(subset=['review_score', 'product_photos_qty'])
    df_few_photos = df_cleaned[df_cleaned['product_photos_qty'] == 1]
    df_many_photos = df_cleaned[df_cleaned['product_photos_qty'] > 3]
    if len(df_few_photos) < 2 or len(df_many_photos) < 2:
        st.warning("N√£o h√° dados suficientes para realizar a compara√ß√£o.")
    else:
        mean_few = df_few_photos['review_score'].mean()
        mean_many = df_many_photos['review_score'].mean()
        t_stat, p_value = stats.ttest_ind(df_few_photos['review_score'], df_many_photos['review_score'], equal_var=False)
        
        st.subheader("Resultados do Teste")
        col1, col2, col3 = st.columns(3)
        col1.metric("M√©dia (1 Foto)", f"{mean_few:.3f}")
        col2.metric("M√©dia (>3 Fotos)", f"{mean_many:.3f}")
        col3.metric("Valor-p do Teste", f"{p_value:.4f}")
        
        st.markdown("---")
        if p_value < 0.05:
            st.success("**Conclus√£o:** Rejeitamos a hip√≥tese nula. Existe uma diferen√ßa estatisticamente significativa entre as m√©dias de avalia√ß√£o.")
        else:
            st.warning("**Conclus√£o:** N√£o h√° evid√™ncia para rejeitar a hip√≥tese nula. A diferen√ßa observada pode ser fruto do acaso.")

        ci_few = stats.t.interval(0.95, len(df_few_photos)-1, loc=mean_few, scale=stats.sem(df_few_photos['review_score']))
        ci_many = stats.t.interval(0.95, len(df_many_photos)-1, loc=mean_many, scale=stats.sem(df_many_photos['review_score']))
        err_few = (ci_few[1] - ci_few[0]) / 2
        err_many = (ci_many[1] - ci_many[0]) / 2
        
        data_to_plot = pd.DataFrame({'Grupo': ['1 Foto', '> 3 Fotos'], 'M√©dia': [mean_few, mean_many], 'erro': [err_few, err_many]})
        fig = px.bar(data_to_plot, x='Grupo', y='M√©dia', error_y='erro',
                      color='Grupo',
                      color_discrete_map={'1 Foto':'#FFA15A', '> 3 Fotos':'#00CC96'},
                      title='Comparativo da M√©dia de Avalia√ß√£o por N¬∫ de Fotos no An√∫ncio',
                      labels={'M√©dia': 'M√©dia da Nota de Avalia√ß√£o'})
        fig.update_layout(showlegend=False)
        st.plotly_chart(fig, use_container_width=True)

    st.markdown("""
        A qualidade do an√∫ncio, representada pelo n√∫mero de fotos, tem um impacto positivo, mas marginal, na satisfa√ß√£o do cliente. Ela n√£o √© um dos principais fatores que levam a uma avalia√ß√£o de 5 estrelas, nem √© a causa principal de uma avalia√ß√£o de 1 estrela, quando comparada a fatores como atraso na entrega ou defeitos no produto.
    """)

# --- P√°gina 7: Qui-Quadrado (Categoria vs. Estado) (COM AN√ÅLISE) ---
elif pagina_selecionada == "Qui-Quadrado (Categoria vs. Estado)":
    st.header("Teste Qui-Quadrado: Rela√ß√£o entre Categoria do Produto e Estado do Cliente")
    st.markdown("""
    Analisamos se a prefer√™ncia por uma categoria de produto √© influenciada pelo estado do cliente.
    - **Hip√≥tese Nula ($H_0$)**: A escolha da categoria √© **independente** do estado do cliente.
    - **Hip√≥tese Alternativa ($H_1$)**: A escolha da categoria **depende** do estado do cliente.
    """)
    st.markdown("---")

    df_chi = df_final.dropna(subset=['customer_state', 'product_category_name_english'])
    top_10_states = df_chi['customer_state'].value_counts().nlargest(10).index
    top_10_categories = df_chi['product_category_name_english'].value_counts().nlargest(10).index
    df_filtered = df_chi[(df_chi['customer_state'].isin(top_10_states)) & (df_chi['product_category_name_english'].isin(top_10_categories))]
    contingency_table = pd.crosstab(df_filtered['customer_state'], df_filtered['product_category_name_english'])
    chi2, p_value, dof, expected = stats.chi2_contingency(contingency_table)
    
    st.subheader("Resultados do Teste")
    col1, col2 = st.columns(2)
    col1.metric("Estat√≠stica Qui-Quadrado (œá¬≤)", f"{chi2:.2f}")
    col2.metric("Valor-p", f"{p_value:.4f}")
    
    # --- An√°lise do Resultado Adicionada ---
    st.subheader("An√°lise do Resultado")
    if p_value < 0.05:
        st.success("**Conclus√£o: Rejeitamos a Hip√≥tese Nula.**")
        st.markdown("O Valor-p extremamente baixo indica que a associa√ß√£o observada entre o estado do cliente e a categoria do produto **n√£o √© uma coincid√™ncia**. Existem, de fato, prefer√™ncias de consumo regionais estatisticamente significativas. O heatmap abaixo ajuda a visualizar onde essas prefer√™ncias s√£o mais fortes.")
    else:
        st.warning("**Conclus√£o: N√£o Rejeitamos a Hip√≥tese Nula.**")
        st.markdown("N√£o h√° evid√™ncias suficientes para afirmar que existe uma associa√ß√£o entre o estado do cliente e a categoria do produto.")

    st.markdown("---")
    st.subheader("Heatmap da Contagem de Pedidos por Categoria e Estado")
    fig = px.imshow(contingency_table, text_auto=True,
                      color_continuous_scale='Plasma',
                      title='Contagem de Pedidos por Categoria e Estado (Top 10)',
                      labels={'x': 'Categoria do Produto', 'y': 'Estado do Cliente'})
    fig.update_layout(height=700)
    st.plotly_chart(fig, use_container_width=True)

    with st.expander("Ver Tabela de Conting√™ncia Completa (Dados do Gr√°fico)"):
        st.dataframe(contingency_table)

    st.markdown("""
        Vemos "hotspots" (c√©lulas de cor clara) muito claros. S√£o Paulo (SP), por ser o maior mercado, domina em volume absoluto em quase todas as top 10 categorias. No entanto, o interessante √© observar as propor√ß√µes. Por exemplo, a popularidade de **'cama_mesa_banho'** em SP √© gigantesca, enquanto outros estados podem ter uma prefer√™ncia maior por **'esporte_lazer'** ou **'beleza_saude'** em rela√ß√£o a sua pr√≥pria base de clientes.
    """)
